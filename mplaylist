#!/usr/bin/env python3

# mplaylist - A simple MPlayer-compatible playlist generator.
# Version: 1.3
# Author: Brett Heinkel <bheinks@gmail.com>

import argparse
import os

from datetime import datetime
from random import shuffle
from re import split

def main():
    parser = argparse.ArgumentParser(
        description = "Generate a playlist of MPlayer-compatible media files.",
    )

    parser.add_argument(
        "entries", metavar = "FILE",
        help = "valid MPlayer media file(s)",
        nargs = "*"
    )

    parser.add_argument(
        "-o",
        help = "specify output file name (default: playlist-HH:MM:SS)",
        action = "store",
        type = str,
        dest = "output",
        default = "playlist-" + datetime.now().strftime("%H%M%S")
    )

    parser.add_argument(
        "-s",
        help = "specify the first index of the playlist",
        action = "store",
        type = int,
        dest = "start"
    )

    parser.add_argument(
        "-e",
        help = "specify the last index of the playlist",
        action = "store",
        type = int,
        dest = "end"
    )

    parser.add_argument(
        "-x",
        help = "limit playlist to certain file types (e.g. mplaylist ... -x avi,wma,mp4)",
        action = "store",
        type = str,
        dest = "extensions"
    )

    parser.add_argument(
        "-r", "--recursive",
        help = "recursively read all files under each directory",
        action = "store_true"
    )

    parser.add_argument(
        "--sort",
        help = "sort files naturally (e.g. Ep. 1, Ep. 2, Ep. 10, Ep. 11)",
        action = "store_true"
    )

    parser.add_argument(
        "--shuffle",
        help = "shuffle files randomly",
        action = "store_true"
    )

    parser.add_argument(
        "-v", "--verbose",
        help = "output additional file information",
        action = "store_true"
    )

    args = parser.parse_args()

    global verbose
    verbose = args.verbose

    file_name = args.output

    if args.entries: # file/folder names passed as arguments
        entries = args.entries
    else: # default to current working directory
        entries = os.listdir()

    if args.recursive:
        for entry in entries[:]: # iterate over copy of file entries list
            if os.path.isdir(entry):
                entries += [entry for (path, folders, files) in os.walk(entry) for entry in files]

    if args.extensions:
        extensions = args.extensions.split(',')
        entries = [entry for entry in entries if entry.split('.')[-1] in extensions]
        
        debug("Limiting playlist to files of type:", ", ".join(extensions))

    # normalize start/end values as list indices
    if args.start:
        args.start -= 1 
    if args.end:
        args.end -= 1

    if args.sort: # sort playlist naturally
        natural_sort(entries)

    if args.shuffle:
        # "backup"/remove index-sensitive values before shuffling
        if args.start: 
            start = entries.pop(args.start)
        if args.end:
            end = entries.pop(args.end)

        debug("Shuffling files randomly...")
        shuffle(entries)

        # reinsert index-sensitive values after shuffling
        if args.start:
            entries.insert(0, start)
        if args.end:
            entries.append(end)
    else:
        # concatenate list with specified start/end indices
        if args.start:
            entries = entries[args.start:]
        if args.end:
            entries = entries[:args.end + 1]

    write_playlist(entries, file_name) # write playlist to file

def debug(*args):
    if verbose:
        print(*args)

def natural_sort(entries):
    convert = lambda text: int(text) if text.isdigit() else text.lower() 
    alphanum = lambda key: [convert(char) for char in split('([0-9]+)', key)]

    entries.sort(key = alphanum)

def write_playlist(entries, file_name):
    with open(file_name, 'w') as playlist:
        debug("Writing to file:", file_name)

        for entry in entries:
            debug('\t' + entry)
            playlist.write(os.path.abspath(entry) + '\n')

if __name__ == "__main__":
    main()
