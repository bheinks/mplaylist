#!/usr/bin/env python

# playlist.py - A simple MPlayer-compatible playlist generator.
# Version: 1.0
# Author: Brett Heinkel <bheinks@gmail.com>

import argparse
import os

from getpass import getuser
from random import shuffle
from re import split
from subprocess import call

TEMP_FILE_NAME = "/tmp/playlist-" + getuser()
verbose = False

def main():
    parser = argparse.ArgumentParser(
        description = "Generate and play a playlist of MPlayer-compatible media\
                files.",
        epilog = "Without any explicit file arguments, program will default to\
                populating the playlist with the contents of the current\
                working directory."
    )

    parser.add_argument(
        "files", metavar = "FILE",
        help = "valid MPlayer media file(s)",
        nargs = "*"
    )

    parser.add_argument(
        "-v", "--verbose",
        help = "output additional file information",
        action = "store_true"
    )

    parser.add_argument(
        "-s", "--start",
        help = "specify the first index of the playlist",
        action = "store",
        type = int
    )

    parser.add_argument(
        "-r", "--random",
        help = "shuffle file names randomly",
        action = "store_true"
    )

    args = parser.parse_args()

    global verbose
    verbose = args.verbose

    if args.files: # if file names passed as arguments
        files = args.files
    else: # else default to current working directory
        files = os.listdir()

    if args.random:
        if verbose: print("Shuffling files randomly...")
        shuffle(files)
        
    else: # skip natural sort if shuffling
        natural_sort(files)

        if args.start: # concatenate list with specified starting pos
            files = files[args.start - 1:]

    write_playlist(files)
    call(["mplayer", "-playlist", TEMP_FILE_NAME])

# sort file names naturally (e.g. ["Ep. 1", "Ep. 2", "Ep. 10", "Ep. 11"])
def natural_sort(files):
    convert = lambda text: int(text) if text.isdigit() else text.lower() 
    alphanum = lambda key: [convert(char) for char in split('([0-9]+)', key)]

    files.sort(key = alphanum)

# write playlist file to /tmp
def write_playlist(files):
    with open(TEMP_FILE_NAME, "w") as temp_file:
        if verbose: print("\nWriting to file:", TEMP_FILE_NAME)

        for file_name in files:
            temp_file.write(os.path.abspath(file_name) + '\n')

            if verbose: print(file_name)

    if verbose: print() # distinguish between program output and mplayer output

if __name__ == "__main__":
    main()
