#!/usr/bin/env python

# playlist.py - A simple MPlayer-compatible playlist generator.
# Version: 1.1
# Author: Brett Heinkel <bheinks@gmail.com>

import argparse
import os

from random import shuffle
from re import split

verbose = False

def main():
    parser = argparse.ArgumentParser(
        description = "Generate a playlist of MPlayer-compatible media files.",
        epilog = "Without any explicit FILE arguments, program will default to\
                populating the playlist with the contents of the current\
                working directoryi (regardless of type/MPlayer compatibility)."
    )

    parser.add_argument(
        "files", metavar = "FILE",
        help = "valid MPlayer media file(s)",
        nargs = "*"
    )

    parser.add_argument(
        "-o", "--output",
        help = "specify output file name",
        action = "store",
        type = str
    )

    parser.add_argument(
        "-r", "--random",
        help = "shuffle file names randomly",
        action = "store_true"
    )

    parser.add_argument(
        "-s", "--start",
        help = "specify the first index of the playlist",
        action = "store",
        type = int
    )

    parser.add_argument(
        "-v", "--verbose",
        help = "output additional file information",
        action = "store_true"
    )

    args = parser.parse_args()

    global verbose
    verbose = args.verbose

    if args.files: # if file names passed as arguments
        files = args.files
    else: # else default to current working directory
        files = os.listdir()

    if args.start: # normalize start value as list index
        args.start -= 1 

    natural_sort(files) # sort playlist naturally

    if args.output: # if output file name specified
        file_name = args.output
    else:
        file_name = "playlist"

    if args.random:
        if args.start: # "backup"/remove start-sensitive value before shuffling
            start = files.pop(args.start)

        if verbose: print("Shuffling files randomly...")
        shuffle(files)

        if args.start: # reinsert specified start index at front
            files.insert(0, start)
    else:
        if args.start: # concatenate list with specified starting pos
            files = files[args.start:]

    write_playlist(files, file_name)

# sort file names naturally (e.g. ["Ep. 1", "Ep. 2", "Ep. 10", "Ep. 11"])
def natural_sort(files):
    convert = lambda text: int(text) if text.isdigit() else text.lower() 
    alphanum = lambda key: [convert(char) for char in split('([0-9]+)', key)]

    files.sort(key = alphanum)

# write playlist file to /tmp
def write_playlist(files, file_name):
    with open(file_name, "w") as playlist:
        if verbose: print("\nWriting to file:", file_name)

        for track in files:
            playlist.write(os.path.abspath(track) + '\n')

            if verbose: print(track)

    if verbose: print() # distinguish between program output and mplayer output

if __name__ == "__main__":
    main()
